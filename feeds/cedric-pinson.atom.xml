<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Cedric Pinson</title><link href="http://cedricpinson.com/" rel="alternate"></link><link href="http://cedricpinson.com/feeds/cedric-pinson.atom.xml" rel="self"></link><id>http://cedricpinson.com/</id><updated>2012-07-04T11:19:00+02:00</updated><entry><title>WebGL Camp</title><link href="http://cedricpinson.com/webgl-camp.html" rel="alternate"></link><updated>2012-07-04T11:19:00+02:00</updated><author><name>Cedric Pinson</name></author><id>tag:cedricpinson.com,2012-07-04:webgl-camp.html</id><summary type="html">&lt;p&gt;I did a talk at webgl camp in switzerland, that was really nice to meet
other people doing webgl stuff. Amazing projects seen there like quake4
in the browser, the nokia demo, really interesting projects. I talked
about how shaders were generated in sketchfab.com and you can find my
slides &lt;a href="demo/webglcamp-shader-generation"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For the list of all talk have look on the
&lt;a href="http://www.shader.org/webglcamp/"&gt;website&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hope to meet webgl campers again in a session in europe.&lt;/p&gt;</summary></entry><entry><title>Nouvelle Vague</title><link href="http://cedricpinson.com/nouvelle-vague.html" rel="alternate"></link><updated>2012-02-20T17:06:00+01:00</updated><author><name>Cedric Pinson</name></author><id>tag:cedricpinson.com,2012-02-20:nouvelle-vague.html</id><summary type="html">&lt;p&gt;Nouvelle Vague is a project I worked on for ultranoir, It offers a
poetic and interactive real-time 3D experience based on Twitter. In a
minimalist and surrealist world, Tweets are carried out with different
flying objects from the borders of the scene to the center where stands
the ultranoir black statue (tweets are retrieved from your selected
hashtag).&lt;/p&gt;
&lt;p&gt;Flying objects are air balloons, biplane, UFOs, zeppelins, balloons.
Each has its own speed and specific paths. The user can select any of
these ships to take advantage of the pilotâ€™s view and explore the scene.
In this post I will explain how we made it.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="media/2012/01/xlarge_nv_2_361c2.jpg" title="xlarge_nv_2_361c2" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="media/2012/01/xlarge_nv_3_4b86e.jpg" title="xlarge_nv_3_4b86e" /&gt;&lt;/p&gt;
&lt;p&gt;click for &lt;a href="http://nouvellevague.ultranoir.com/"&gt;real time version here&lt;/a&gt;
( after the video intro ). If your browser does not support webgl you
can watch a &lt;a href="http://youtu.be/HxUwJ_iPdNc"&gt;video version on youtube&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Scene&lt;/h2&gt;
&lt;p&gt;We wanted to have vehicles coming from mountain/sky to the statue and
leave a tweet. We did not want to manage vehicle collisions, after a
while, we decided to organize scene and vehicles animations like the
picture below.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="media/2012/01/animation_row0.jpg" title="animation_row0" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="media/2012/01/animation_row1.jpg" title="animation_row1" /&gt;&lt;/p&gt;
&lt;p&gt;The idea is to avoid vehicles to penetrate each other, for this we
constrained each vehicle in a 'row' in which the animation will be
played (off course the animation must be setup to fit in that virtual
row). Doing this we minimized collision between vehicles but we knew it
will not be 100% perfect and sometime you could see artifact near the
statue.&lt;/p&gt;
&lt;p&gt;Animation's vehicle were played in loop mode. To add a bit of randomness
I added a random delay at the beginning of a new loop to avoid vehicles
to be synchronized together (eyes are very good to detect those
pattern).
Animations were made using blender and to make it work with
&lt;a href="http://osgjs.org/"&gt;osgjs&lt;/a&gt; I had to update it to support keyframes
container from osg, it also means that now the &lt;a href="http://osgjs.org/tools/"&gt;osgjs
plugin&lt;/a&gt; for osg is able to export osgAnimation
data. Why using this workflow ? In all my project I use
&lt;a href="https://github.com/openscenegraph/osg"&gt;OpenSceneGraph&lt;/a&gt; as a swiss
knife, then I export data from osg to osgjs.&lt;/p&gt;
&lt;h2&gt;Drawing Texts&lt;/h2&gt;
&lt;p&gt;The text and logo on the ground were displayed using distance map. When
you have vector shape with closed shape like text/logo it's more
efficient to use distance map instead of classical texture mapping. The
advantage is that you can use less texture size and with better result
than just bitmap. To do this you have to convert your original texture
into a new one (distance map) then you use a 'special' shader to display
it in realtime. Below you can see picture from the &lt;a href="http://www.valvesoftware.com/publications/2007/SIGGRAPH2007_AlphaTestedMagnification.pdf"&gt;Valve
paper&lt;/a&gt;,
both image are at the same resolution.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="media/2012/01/valve_0.png" title="valve_0" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="media/2012/01/valve_12.png" title="valve_1" /&gt;&lt;/p&gt;
&lt;p&gt;(Pictures from valve paper)&lt;/p&gt;
&lt;p&gt;The only problem I had was for the big text/logo in center of the scene,
even with distance map I had aliasing because of the static 'edge size'
in the shader.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;edgeSize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;edgeSize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smoothstep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To fix this, I adapted the 'edgeSize' depending on the camera position,
it's more a hack to fix aliasing than a real fix.&lt;/p&gt;
&lt;h2&gt;Camera&lt;/h2&gt;
&lt;p&gt;We implemented 2 cameras, one for the center of the scene to watch the
statue and tweets and one in each vehicles. Camera in vehicles was more
tricky because vehicles comes and back with the tweets. In the beginning
I had a simple lookat camera that was located in the vehicle but looked
to the statue. It worked but not really interesting, we wanted to be in
the plane and see the looping. To do that I changed the camera to fps
one. To tune camera and let the artist configure them, I added offset
connected to html sliders.
Good but vehicles came in and went back after bringing their tweets, so
the problem was that we were seeing an empty screen (the mountain) when
the vehicles returned to their original position. We resolved this by
changing the camera from 'in vehicle' to the camera 'look to the statue
from the vehicle'.
Finally for automatic mode we improved the camera to select the best
camera available. It meant that we checked for each vehicles the time in
their animation, and select the vehicles that has a time in 'good'
range. Off course we had to tune the range for each animations of
vehicles. You can see below the differents event in timeline for a
vehicles.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="media/2012/02/timeline_0.jpg" title="timeline_0" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="media/2012/02/timeline_1.jpg" title="timeline_1" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Delay Random&lt;/em&gt;: random time before playing vehicle animation.
&lt;em&gt;Leave tweet&lt;/em&gt;: time when the tweet box leave the vehicle and play the
transition animation.
&lt;em&gt;Camera cut&lt;/em&gt;: when the vehicle start to go back, we cut to watch the
statue and tweets.
&lt;em&gt;Camera invalid&lt;/em&gt;: camera invalid means the vehicle can't be selected
when the camera switch to a new one&lt;/p&gt;
&lt;h2&gt;Shadow&lt;/h2&gt;
&lt;p&gt;The ground was a plane so I took advantage of this to use flat textured
quad that followed the position of the vehicle but at 0 in z. Shadow
textures were generated by the artist then converted to distance map and
finally used on the quad. We used distance map on those texture because
it gave more control, for example the blur of the edge. It worked on
most vehicles except for the plane because of its animations (the shadow
would not follow the plane rotation). To fix this I used a matrix that
project the shape of the plane onto the ground. Using this method meant
no soft edges for shadow plus some artifact due to blending. Deadline
make us to fix it later.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="media/2012/01/shadow_issue.jpg" title="shadow_issue" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="media/2012/01/shadow_issue2.jpg" title="shadow_issue2" /&gt;&lt;/p&gt;
&lt;p&gt;There is a &lt;a href="http://osgjs.org/osgjs/examples/shadow/index.html"&gt;shadow
example&lt;/a&gt; in
&lt;a href="http://osgjs.org/"&gt;osgjs&lt;/a&gt; that explains differents shadow techniques.&lt;/p&gt;
&lt;h2&gt;Transitions&lt;/h2&gt;
&lt;p&gt;To make the tweets going from vehicles to the statue, we had to make a
transition. I wanted to try something like disolving the tweet box to a
lot of smaller cubes and then moved them like they are transported by
wind to the statue.
I first setup the effect &lt;a href="http://osgjs.org/osgjs/examples/cubemotion/"&gt;on this
page&lt;/a&gt; and then improved it
with a fake wind like in the
&lt;a href="demo/demojs-fff/"&gt;demojs-fff&lt;/a&gt;. To finish I added a
simple fade out when cubes are near the statue and voila.
The effect was not optimized and I used one 3d model per cube, that
would be better to use pseudo instancied cube or pack all cube into one
model and passing transformation to the shader with attributes or
uniforms, again time...&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="media/2012/01/transition_0.jpg" title="transition_0" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="media/2012/01/transition_1.jpg" title="transition_1" /&gt;&lt;/p&gt;
&lt;h2&gt;Clouds&lt;/h2&gt;
&lt;p&gt;I wanted to try volumetric clouds on this project. For this I tried
different method&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mega particles (&lt;a href="http://www.youtube.com/watch?v=3QqD26SXWDc"&gt;youtube
    video&lt;/a&gt;). Because of the
    shower doors effect I dropped this method after a few tries.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://http.developer.nvidia.com/GPUGems/gpugems_ch39.html"&gt;3d volume
    textures&lt;/a&gt;,
    I started but I needed more time to implement it. The idea was to
    generate a 3d texture based on noise function then in realtime draw
    slice to represent the volume. I will try to release an example
    later.&lt;/li&gt;
&lt;li&gt;Particles based. Like particles you draw different textured sprite
    with transparency. In this case you have to sort sprite from the
    camera position and render with blending enabled. I used this method
    because of time and it worked enough. On screenshots below you can
    see some test with tuning parameters of clouds.&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;

&lt;p&gt;&lt;img alt="" src="media/2012/01/cloud_0.jpg" title="cloud_0" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="media/2012/01/cloud_1.jpg" title="cloud_1" /&gt;&lt;/p&gt;
&lt;h2&gt;Tools&lt;/h2&gt;
&lt;p&gt;One of the most important aspect when I worked on this project was how
we setup and tuned effects. I wrote scripts to export 3d models,
generate
&lt;a href="https://github.com/cedricpinson/DistanceMapGenerator"&gt;distancemap&lt;/a&gt; as
usual, but the new tool I wrote for this project was to integrate
automatic slider generation from shader parameters. To do this, I wrote
functions that were able to check variable and type in shaders and from
those informations created html slider elements that communicated
directly with the shaders. To let artists tune effect and focus only on
the desired effects I added and not think if they could lose or not
their work, I saved value with localstorage. When artists were happy
with the result they sent me by mail the value then I added their value
as 'defaults' value. This process could be improved in futur with undo
and save set of parameters, but even without that it was really
convenient to let artist worked this way. You can see on the screenshot
below the sliders used to fine tune the rendering effects.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="media/2012/01/sliders.jpg" title="sliders" /&gt;&lt;/p&gt;
&lt;p&gt;You can try the &lt;a href="demo/nouvellevague/"&gt;developer
version&lt;/a&gt; and play with sliders&lt;/p&gt;</summary></entry><entry><title>DemoJS</title><link href="http://cedricpinson.com/demojs.html" rel="alternate"></link><updated>2011-12-27T00:00:00+01:00</updated><author><name>Cedric Pinson</name></author><id>tag:cedricpinson.com,2011-12-27:demojs.html</id><summary type="html">&lt;p&gt;We had a meeting a few months ago before the demojs event in Paris to
organize it. I worked on the
&lt;a href="demojs-fff/"&gt;intro&lt;/a&gt; to announce the event 10
days before the deadline. 4 of us made this intro: Guillaume Lecollinet
who helped on design and css stuff, Ulrick for the music and Mestaty for
3d models, both are from &lt;a href="http://frequency.fr/"&gt;FRequency&lt;/a&gt; demo group
and I worked on the code. If you are interested in particles you really
need to read this &lt;a href="http://directtovideo.wordpress.com/"&gt;blog&lt;/a&gt;. This guy
does awesome things.&lt;/p&gt;
&lt;h2&gt;Particles again&lt;/h2&gt;
&lt;p&gt;At the beginning I did not really know what I wanted to create. I wanted
to work on particles but with more complexity than my &lt;a href="http://cedricpinson.com/webgl-particles.html"&gt;previous
toy&lt;/a&gt;. Finally I did an
intro only with particles. The consequence is that the entire intro used
the same shader, I will describe the following stuff I used into the
intro.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Verlet physic integration&lt;/li&gt;
&lt;li&gt;Spawning particles&lt;/li&gt;
&lt;li&gt;Distance map&lt;/li&gt;
&lt;li&gt;Velocity field&lt;/li&gt;
&lt;li&gt;Morphing of 3d models&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Verlet Integration&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Verlet_integration"&gt;Verlet integration&lt;/a&gt; in
a nutshell is a numerical method used to integrate Newton's equations of
motion. There is a good
&lt;a href="http://codeflow.org/entries/2010/nov/29/verlet-collision-with-impulse-preservation/"&gt;blog&lt;/a&gt;
and examples how to use it. In webgl we can't use render to texture on
floating point texture. In fact we can use an extension but I wanted to
make it works on most browser with webgl so I did not use the extension.
The consequence is that particles coordinates has to be encoded in
specific format on rgba pixels.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="media/2011/11/buffers.jpg" title="SAMSUNG" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="media/2011/11/pixels.jpg" title="SAMSUNG" /&gt;&lt;/p&gt;
&lt;p&gt;In my previous &lt;a href="http://cedricpinson.com/webgl-particles.html"&gt;particles
toy&lt;/a&gt; I used 16 bits fixed
point to encode coordinates, but on this one I wanted to improve it and
try 24 bits to have more precision, I encoded more informations like
signed distance, life of particle, or material id in pixels. (picture
above left). In webgl there is no multi render target and I had to draw
the scene 3 times to compute particle's positions, for x, y and z. To
select each dimension I wanted I used a uniform.
Finally to compute a 'next' frame (3 textures) it required 'current'
frame (3 textures) 'previous' frame (3 textures), in final I needed 9
textures to just have the verlet physic running without controlling
their motions. For this I used others textures I will describe after.
Texture size . To not hurt too much my gpu, I fixed the texture's size
to 512x512, meaning 262144 particles. We could&lt;/p&gt;
&lt;h2&gt;Spawning particles&lt;/h2&gt;
&lt;p&gt;To determine the life span and position of new particles, I used uv
range of particles to distributes them in space. It's not really elegant
or pratical for bigger projects/shapes. For example, the equalizer scene
was done allowing particles on a plane where equalizers were. Basically
there is a range 0.25 in 'u' per equalizer bar and I limited the v to
0.5. So we have 0.25*(4 equalizer) and v limited in 0.5 it means
0.25*4u + 0.5v = 131072 particles allocated for equalizers, and the
131072 others are used for the 3d models. Next time I would like to try
'mesh emitter' or something more useful than doing it manually.&lt;/p&gt;
&lt;h2&gt;Distance Map&lt;/h2&gt;
&lt;p&gt;What is a distance map ? you can read this &lt;a href="http://www.valvesoftware.com/publications/2007/SIGGRAPH2007_AlphaTestedMagnification.pdf"&gt;paper from
valve&lt;/a&gt;
that explains how it works.
Distance map is a really useful tool to control particles. In the intro
I used texture that encodes distance map and gradient (the vector that
tells you which direction to take to go to the nearest point on the
shape). For this I created a tool
(&lt;a href="https://github.com/cedricpinson/DistanceMapGenerator"&gt;DistanceMapGenerator&lt;/a&gt;)
and then I computed the gradient from the distance map. Finally I
constructed a texture that contains both pieces of information. During
the computation of the position I take the signed distance of this
position to fit the shape I want, eg:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;vec3&lt;/span&gt; &lt;span class="nf"&gt;getDirection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec3&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;vec4&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;texture2D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;DistanceMap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vec2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="n"&gt;vec2&lt;/span&gt; &lt;span class="n"&gt;grad&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;vec3&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vec3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;grad&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mf"&gt;0.125&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;grad&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="n"&gt;dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="nf"&gt;getDistance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec3&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;texture2D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;DistanceMap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vec2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// here I know at wich distance my particle is from the nearest border&lt;/span&gt;
&lt;span class="n"&gt;distance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getDistance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentPosition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;weightDistanceMap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// and here I know in wich direction the nearest border is&lt;/span&gt;
&lt;span class="n"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getDirection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentPosition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;weightDistanceMap&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// it&amp;#39;s easy after to use this direction to create a force and make the&lt;/span&gt;
&lt;span class="c1"&gt;// particle go in the direction of the shape`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="media/2011/11/Title.jpg" title="Title" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="media/2011/11/Title_grad.jpg" title="Title_grad" /&gt;&lt;/p&gt;
&lt;p&gt;This technique was used for most of the motions/shapes I wanted the
particles to fit in. I tried to manipulate particles manually but it was
too complex and I was not able to do what I wanted to. Distance maps is
really easier.&lt;/p&gt;
&lt;h2&gt;Velocity field&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="media/2011/11/udav1.jpg" title="udav" /&gt;&lt;/p&gt;
&lt;p&gt;To add some perturbation motion like 'procedural wind' I used a
MathGL/udav tool. The idea was to find a nice formula I could use in the
shader that produces nice motion. For that I used udav to display the
vector field from the formula. Once I was happy with the vector field, I
added some variation in real time depending on time. This tool was not
really convenient and maybe next time I will write something to help me
with this. Once the formula was selected I used a lookup to get my
vector depending on particle's position. It looks like this below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;vec3&lt;/span&gt; &lt;span class="nf"&gt;getVelocityField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec3&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;15.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;//mod(time, 5.0);&lt;/span&gt;
  &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;vx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;vy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;vz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;vec3&lt;/span&gt; &lt;span class="n"&gt;vel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vec3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;vx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vz&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vel&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;3D models&lt;/h2&gt;
&lt;p&gt;At the end of the intro I used morphing between different 3d models (
the firefox logo, and the abstract model formed of cube ). To use those
models with particles I first had to convert them into a suitable format
for the particle system, meaning into textures that would encode the
model's position as rgb pixels. The particle system used 262k particles
but models used up to 131k vertexes ( remember 131k particles were
allocated for the equalizers ). So we have 131k particles to display
morph and animate our 3d models. The morphing between the different
shapes works with a lerp between position ( finalVertex = model0*t +
model1*(1.0-t) ). To add some perturbation to the motion we still add
the 'fake wind' during the animation. If you want to check the tool to
build vertex to texture format used by the particle system look
&lt;a href="https://github.com/cedricpinson/osg/tree/master/src/osgPlugins/vert2text32"&gt;here&lt;/a&gt;.
It's a plugin for &lt;a href="http://www.openscenegraph.org/"&gt;openscenegraph&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Music&lt;/h2&gt;
&lt;p&gt;The music was done by Ulrick from FRequency and they used their own tool
to export pattern events in a c++ header. I made a little script to
convert the result into json, and then I injected events data into
timeline.js. &lt;a href="https://github.com/cedricpinson/timeline.js"&gt;Timeline.js&lt;/a&gt;
was great but I needed to patch it to support callback and use an
external time, the one that came from the music.&lt;/p&gt;
&lt;h2&gt;Improvements&lt;/h2&gt;
&lt;p&gt;There is a lot of stuff I would have wanted to do better but 10 days was
too short. So I discarded lighting on particles, shadow, spawn mesh
emitter, post process effect, smoke simulation with sph. Maybe the next
time I will play with particles I will be able to add some of those
elements.&lt;/p&gt;
&lt;h2&gt;links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="demo/demojs-fff/"&gt;Intro fff&lt;/a&gt; or the
    &lt;a href="http://www.youtube.com/watch?v=DHup1JfEsXo"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://directtovideo.wordpress.com/"&gt;directtovideo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://codeflow.org/"&gt;codeflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://frequency.fr/"&gt;FRequency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://osgjs.org"&gt;osgjs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cedricpinson/DistanceMapGenerator"&gt;DistanceMapGenerator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cedricpinson/osg/tree/master/src/osgPlugins/vert2text32"&gt;model to
    texture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://demojs.org/"&gt;demojs.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cedricpinson/timeline.js"&gt;Timeline.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks for people who helps to make this webgl intro it was really fun.
The most stuff I liked was the good ambience of the team, that was
really cool. Thank you guys :)&lt;/p&gt;</summary></entry><entry><title>GlobeTweeter - Experience</title><link href="http://cedricpinson.com/globetweeter-experience.html" rel="alternate"></link><updated>2011-05-03T10:47:00+02:00</updated><author><name>Cedric Pinson</name></author><id>tag:cedricpinson.com,2011-05-03:globetweeter-experience.html</id><summary type="html">&lt;p&gt;Over the last few months, I have been working on a webgl demo for
firefox. The objective was to create a demo to showcase webgl
technology. I am currently working on a 3D framework called
&lt;a href="http://osgjs.org"&gt;osgjs&lt;/a&gt; so the application uses this javascript
library. osgjs is a javascript implementation of
&lt;a href="http://openscenegraph.org"&gt;OpenSceneGraph&lt;/a&gt; and helps to manage 3d
scenes and webgl states. You can get more information on the
&lt;a href="http://osgjs.org"&gt;website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We did different experiments before we ended up with globetweeter, I
kept some of them for history :)&lt;/p&gt;
&lt;h3&gt;Jurassic Park&lt;/h3&gt;
&lt;p&gt;I started off by creating a file system similar to the 3D file system
used in Jurassic Park. I had to figure out the best type of camera that
would be suitable to use with the system.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="media/2011/03/camera-1.jpg" title="Camera" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="media/2011/03/camera-0.jpg" title="Camera" /&gt;&lt;/p&gt;
&lt;p&gt;The idea is simple. Let's say a user selects the item &lt;strong&gt;B&lt;/strong&gt; . When
selected, the camera moves from its current viewpoint to the chosen
item. The position of the camera (&lt;strong&gt;C&lt;/strong&gt;) is in orbit relative to the
selected item. Basically I used a lookat matrix from the camera position
(&lt;strong&gt;C&lt;/strong&gt;) to the target item. To create the camera motion when moving from
one item to another, I interpolated the target position (&lt;strong&gt;from A to
B&lt;/strong&gt;) and generated a rotation around this interpolated point (&lt;strong&gt;X&lt;/strong&gt;)
during the animation. I added some constraints like the distance from
the target point and some limits in the rotation to keep the camera
position in range (like if we would see the item from a 3rd person).
Check out this &lt;a href="demo/ff4demo/demo3/demo.html"&gt;experiment&lt;/a&gt;
(use 'del' key to go to previous level).&lt;/p&gt;
&lt;h3&gt;Twitter&lt;/h3&gt;
&lt;p&gt;This idea ended up being too geeky, so we tried out something more
popular and surrounded by more hype. And therein was born the idea of
displaying tweets with 3D.
A first try was to iterate on something like tweet deck but we wanted
something that would be more responsive and with eye candy features...
the first ugly &lt;a href="demo/ff4demo/demo2/demo.html"&gt;experiment&lt;/a&gt;
was to render tweets in a canvas and to use them as texture in 3D. We
ended up dropping this idea and instead decided to show tweets
geo-localized on the earth.&lt;/p&gt;
&lt;p&gt;The last idea we had is the current incarnation of the globe tweeter. To
make the globe I used 3 data files from &lt;a href="http://www.naturalearthdata.com/"&gt;natural earth
data&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://showwebgl.com/show/?q=g6lu4j6t5m8scg4s8og0wkwwss0gwk0&amp;amp;LIGHT=0&amp;amp;CULL_FACE=0"&gt;110m admin 0
    countries.shp&lt;/a&gt;
    contains the polygons of countries&lt;/li&gt;
&lt;li&gt;&lt;a href="http://showwebgl.com/show/?q=6f68hn2hr8so44csowwc4skkcgg4s8k&amp;amp;LIGHT=0"&gt;110m
    coastline.shp&lt;/a&gt;
    contains only the coastline (meaning lines around oceans)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://showwebgl.com/show/?q=fxaeg6xeuvc4so0sgcgkswsgk0sw8g4&amp;amp;LIGHT=0"&gt;110m admin 0 boundary lines
    land.shp&lt;/a&gt;
    contains the lines inside land boundaries&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you can see, those data are flat and need to be projected on a
sphere. Before projecting those data, however, I had to tesselate the
triangles in order to have enough vertex to project a clean shape on the
sphere. For this I have created a tool called 'grid'. It tessellates the
input shape with a grid. It's a kind of boolean union operation.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="media/2011/03/grid.jpg" title="grid" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="media/2011/03/grid0.jpg" title="grid0" /&gt;&lt;/p&gt;
&lt;p&gt;Above on the left, you can see the white model that is the original
'110m admin 0 countries.shp'. The black model is the same model but
tesselated a bit more to fit more closely on the sphere. On the right is
the model (grid) use to tessellate the original '110m admin 0
countries.shp'. The idea is to add subdivisions on the height section of
the model.&lt;/p&gt;
&lt;p&gt;Once the data is subdivided enough, I created a tool to project each
vertex onto a sphere using the standard &lt;a href="http://en.wikipedia.org/wiki/WGS84"&gt;WGS84
projection&lt;/a&gt;. &lt;strong&gt;You can see a webgl
version of the projected model by clicking on the picture&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="media/2011/03/globe-2.jpg" title="globe-2" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="media/2011/03/globe-1.jpg" title="globe-1" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="media/2011/03/globe-0.jpg" title="globe-0" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="media/2011/03/globe-4.jpg" title="globe-4" /&gt;&lt;/p&gt;
&lt;p&gt;Once the data below were ready we selected a nice color for each model.
On the demo I drew the globe in two passes. The first pass drew back
faces of '110m admin 0 countries' with 'back color' and the second drew
the front faces with 'front color'. It was necessary to have
transparency of the globe because of the blending mode 'One Minus Src
Alpha'.&lt;/p&gt;
&lt;p&gt;The Final result looks like this&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="media/2011/05/Screenshot-21.jpg" title="Screenshot-21" /&gt;&lt;/p&gt;
&lt;h3&gt;SceneGraph representation&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="media/2011/04/gt_tree.jpg" title="SceneGraph" /&gt;&lt;/p&gt;
&lt;h3&gt;Wave&lt;/h3&gt;
&lt;p&gt;To add some details about twitter activity I setup a simple wave physics
simulation that produces waves where tweets appear. The algorithm to
produce the waves is explained
&lt;a href="http://freespace.virgin.net/hugo.elias/graphics/x_water.htm"&gt;here&lt;/a&gt;. To
accomplish this I used two small hidden canvases with a size of 128x64 ,
I used small canvases because the computation is done on javascsipt and
can be expensive. The update of waves was updated every 1/30 seconds.
The update function did the following operations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Convert tweets locations into source wave in the canvas.&lt;/li&gt;
&lt;li&gt;Do the physics computation and store the result into the current
    canvas.&lt;/li&gt;
&lt;li&gt;Upload the current canvas as texture to use in the vertex shader.
    The vertex shader used this texture as a
    &lt;a href="http://en.wikipedia.org/wiki/Heightmap"&gt;heightmap&lt;/a&gt;. To understand
    better how the heightmap works you can see
    &lt;a href="http://showwebgl.com/show/?q=7m1vu1clptog8ccs880o0s44cwks000&amp;amp;LIGHT=0"&gt;here&lt;/a&gt;
    the original model without waves.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vertex Shader&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#ifdef GL_ES&lt;/span&gt;
&lt;span class="n"&gt;precision&lt;/span&gt; &lt;span class="n"&gt;highp&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="n"&gt;vec3&lt;/span&gt; &lt;span class="n"&gt;Vertex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="n"&gt;vec3&lt;/span&gt; &lt;span class="n"&gt;TexCoord0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;uniform&lt;/span&gt; &lt;span class="n"&gt;mat4&lt;/span&gt; &lt;span class="n"&gt;ModelViewMatrix&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;uniform&lt;/span&gt; &lt;span class="n"&gt;mat4&lt;/span&gt; &lt;span class="n"&gt;ProjectionMatrix&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;uniform&lt;/span&gt; &lt;span class="n"&gt;mat4&lt;/span&gt; &lt;span class="n"&gt;NormalMatrix&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;uniform&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;uniform&lt;/span&gt; &lt;span class="n"&gt;sampler2D&lt;/span&gt; &lt;span class="n"&gt;Texture0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;varying&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;maxHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1400000.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;vec4&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;texture2D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;Texture0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TexCoord0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xy&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;vec3&lt;/span&gt; &lt;span class="n"&gt;normal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Vertex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;vec3&lt;/span&gt; &lt;span class="n"&gt;normalTransformed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vec3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NormalMatrix&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;vec4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;dotComputed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;normalTransformed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vec3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dotComputed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;vec4&lt;/span&gt; &lt;span class="n"&gt;vrt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vec4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Vertex&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;  &lt;span class="n"&gt;normal&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;maxHeight&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;gl_Position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ProjectionMatrix&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ModelViewMatrix&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;vrt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mf"&gt;5.0&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Fragment Shader&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#ifdef GL_ES&lt;/span&gt;
&lt;span class="n"&gt;precision&lt;/span&gt; &lt;span class="n"&gt;highp&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;span class="n"&gt;uniform&lt;/span&gt; &lt;span class="n"&gt;vec4&lt;/span&gt; &lt;span class="n"&gt;fragColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;varying&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;gl_FragColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fragColor&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This shader is applied on a regular grid model projected on the sphere
as explained before but this time the grid has a better resolution. Some
of you will not see the relief of the waves because some webgl
implementation does not expose texture unit on the vertex shader.
Therefore as a work around I made another shader that does not move the
vertexes in the vertex shader. Instead it only changes the color of the
vertexes. You can read more about this issue on the &lt;a href="https://groups.google.com/group/angleproject/browse_thread/thread/fbf08f0ab51ff26d"&gt;Angle
project&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Vertex Shader&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#ifdef GL_ES&lt;/span&gt;
&lt;span class="n"&gt;precision&lt;/span&gt; &lt;span class="n"&gt;highp&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="n"&gt;vec3&lt;/span&gt; &lt;span class="n"&gt;Vertex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="n"&gt;vec3&lt;/span&gt; &lt;span class="n"&gt;TexCoord0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;uniform&lt;/span&gt; &lt;span class="n"&gt;mat4&lt;/span&gt; &lt;span class="n"&gt;ModelViewMatrix&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;uniform&lt;/span&gt; &lt;span class="n"&gt;mat4&lt;/span&gt; &lt;span class="n"&gt;ProjectionMatrix&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;uniform&lt;/span&gt; &lt;span class="n"&gt;mat4&lt;/span&gt; &lt;span class="n"&gt;NormalMatrix&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;varying&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;dotComputed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;varying&lt;/span&gt; &lt;span class="n"&gt;vec2&lt;/span&gt; &lt;span class="n"&gt;TexCoordFragment&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;TexCoordFragment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TexCoord0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;vec3&lt;/span&gt; &lt;span class="n"&gt;normal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Vertex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;vec3&lt;/span&gt; &lt;span class="n"&gt;normalTransformed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vec3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NormalMatrix&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;vec4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;dotComputed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;normalTransformed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vec3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dotComputed&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;0.001&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;dotComputed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;gl_Position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ProjectionMatrix&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ModelViewMatrix&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;vec4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Vertex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Fragment Shader&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#ifdef GL_ES&lt;/span&gt;
&lt;span class="n"&gt;precision&lt;/span&gt; &lt;span class="n"&gt;highp&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;span class="n"&gt;uniform&lt;/span&gt; &lt;span class="n"&gt;sampler2D&lt;/span&gt; &lt;span class="n"&gt;Texture0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;uniform&lt;/span&gt; &lt;span class="n"&gt;vec4&lt;/span&gt; &lt;span class="n"&gt;fragColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;uniform&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;varying&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;dotComputed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;varying&lt;/span&gt; &lt;span class="n"&gt;vec2&lt;/span&gt; &lt;span class="n"&gt;TexCoordFragment&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;vec4&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;texture2D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;Texture0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TexCoordFragment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xy&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;gl_FragColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fragColor&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dotComputed&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.999999&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Yes it's a bit sad, I have seen this issue lately ... :( . As conclusion
this effect works well but it takes too much cpu in javascript/canvas, I
should have tried a different effect that was less cpu intensive. Have a
look at this &lt;a href="http://www.youtube.com/watch?v=ul9cIj7wISE"&gt;video&lt;/a&gt; if you
can't see the waves's relief.&lt;/p&gt;
&lt;h3&gt;Tweets&lt;/h3&gt;
&lt;p&gt;Tweets are displayed with the avatar image with simple quad oriented and
positioned on the sphere from latitude/longitude. To add a nice border
around the image I used a blending operation in the canvas with the
following image.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="media/2011/04/tweets.jpg" title="tweets" /&gt;&lt;/p&gt;
&lt;p&gt;Finally to have a nice animation when a tweet appears and disappears, I
used an EaseInQuad function for the color, and EaseOutElastic for the
scale component.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;EaseInQuad&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;EaseOutElastic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;10.0&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
                                         &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
                                         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Zooming to the earth made tweet really huge related to the screen. To
prevent this effect I introduced a scale factor that depends on the
camera altitude. The full code to update a tweet looks like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nv&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;ratio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;currentTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getFrameStamp&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="n"&gt;getSimulationTime&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;startTime&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;startTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;currentTime&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;duration&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;duration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;5.0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;currentTime&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;startTime&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setNodeMask&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;ratio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;originalMatrix&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;scale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;scale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;osgAnimation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;EaseOutElastic&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;scale&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;manipulator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WGS_84_RADIUS_EQUATOR&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;manipulator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;height&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;limit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
           &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;limitConst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="o"&gt;/(&lt;/span&gt;&lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WGS_84_RADIUS_EQUATOR&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;limit&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
           &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;rr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;manipulator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;limit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;limitConst&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
           &lt;span class="n"&gt;scale&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;rr&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;scaleMatrix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;osg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Matrix&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;makeScale&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setMatrix&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;osg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Matrix&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;mult&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;originalMatrix&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scaleMatrix&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;osgAnimation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;EaseInQuad&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ratio&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;uniform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;uniform&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;uniform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;traverse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nv&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;NodeJS&lt;/h3&gt;
&lt;p&gt;The server responsible for sending tweets to the clients is done with
nodejs. I used twitter-node, socket.io, and express modules to build the
server. The code is really short so you can have a look on the server
directly. You can get the server code
&lt;a href="https://github.com/cedricpinson/globetweeter-server/"&gt;here&lt;/a&gt; and improve
it :) A big hug to proppy who bootstraps the nodejs server \o/&lt;/p&gt;
&lt;h3&gt;Stats&lt;/h3&gt;
&lt;p&gt;The first graph shows the number of connections per day. There is a big
spike when the news was broadcasted. The second graph shows the number
of connections per day but with a smaller scale and the last graph shows
the cumulated number of connections.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="media/2011/05/stats1.png" title="stats" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Links&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;video &lt;a href="http://www.youtube.com/watch?v=fWuPWaBbS_o"&gt;Firefox 4 3D WebGL Demo -
    GlobeTweeter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;video &lt;a href="http://www.youtube.com/watch?v=Dw5G0UvWB80"&gt;GlobeTweeter--Behind the Making of the
    Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;video &lt;a href="http://www.youtube.com/watch?v=ul9cIj7wISE"&gt;GlobeTweeter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;video &lt;a href="http://www.youtube.com/watch?v=Wo_LlP-VvhY"&gt;WebGL globetweeter demo Firefox
    4.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mozillademos.org/demos/globetweeter/demo.html"&gt;globe tweeter
    demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cedricpinson/globetweeter/"&gt;globe tweeter source
    code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cedricpinson/globetweeter-server"&gt;globe tweeter server source
    code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cedricpinson/osgjs"&gt;osgjs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sketchfab.com"&gt;sketchfab to convert / display model on the
    web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="demo/insideglobetweeter/"&gt;conf at parisjs#6&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A big thanks to Paul Rouget from Mozilla who made this demo possible and
Guillaume Lecollinet who designed this demo.&lt;/p&gt;</summary></entry><entry><title>ParisJS - Inside GlobeTweeter</title><link href="http://cedricpinson.com/parisjs-inside-globetweeter.html" rel="alternate"></link><updated>2011-04-27T17:15:00+02:00</updated><author><name>Cedric Pinson</name></author><id>tag:cedricpinson.com,2011-04-27:parisjs-inside-globetweeter.html</id><summary type="html">&lt;p&gt;For &lt;a href="http://parisjs.org/"&gt;ParisJS&lt;/a&gt; #6 I did a conference about
&lt;a href="https://mozillademos.org/demos/globetweeter/demo.html"&gt;GlobeTweeter&lt;/a&gt;,
and an overview of code inside the application. I did the slides with
&lt;a href="http://paulrouget.com/e/introdzslides/"&gt;dzslides&lt;/a&gt; from Paul Rouget,
thanks for this tool :)&lt;/p&gt;
&lt;p&gt;&lt;a href="demo/insideglobetweeter/"&gt;&lt;img alt="" src="media/2011/04/slides1.jpg" title="slides1" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="demo/insideglobetweeter/"&gt;&lt;img alt="" src="media/2011/04/slides0.jpg" title="slides0" /&gt;&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>OpenSceneGraph tools for OpenGL es 2.0</title><link href="http://cedricpinson.com/openscenegraph-tools-for-opengl-es-2-0.html" rel="alternate"></link><updated>2011-04-14T11:37:00+02:00</updated><author><name>Cedric Pinson</name></author><id>tag:cedricpinson.com,2011-04-14:openscenegraph-tools-for-opengl-es-2-0.html</id><summary type="html">&lt;p&gt;I have done plugins and pseudo loader for OpenSceneGraph to work with
OpenGL es 2.0 spec and webgl. The first thing you need when working with
big mesh is to split them in bunch of 65536 vertexes because opengl es
2.0 speccification limit the size of indexes to 16 bits. In order to
manage this case, I have done a &lt;a href="http://hg.plopbyte.net/osg-trunk/file/1af36d5c6fff/src/osgPlugins/split"&gt;pseudo loader called
split&lt;/a&gt;,
so you can use it like that&lt;/p&gt;
&lt;p&gt;&lt;code&gt;osgconv hugemodel.osg.split hugemodel_splited.osg # careful about the MERGE_GEOMETRY flag in OSG_OPTIMIZATION&lt;/code&gt;&lt;br /&gt;
I have also done a resolve pseudo loading to re affect location of
texture filename. The problem is that when I convert models to
&lt;a href="http://osgjs.org"&gt;osgjs&lt;/a&gt;, osg is able to find the file because he can
find in a path list, but once the image loaded it does not update the
file location ( and it makes sense ) . It's not suitable for
&lt;a href="http://showwebgl.com"&gt;showwebgl&lt;/a&gt; that converts models on server side
and need to reassign the image path before converting it to osgjs, this
plugin loader is called
&lt;a href="http://hg.plopbyte.net/osg-trunk/file/1af36d5c6fff/src/osgPlugins/resolve"&gt;resolve&lt;/a&gt;
. And the last plugin is osgjs itself that is able to convert osg native
format to &lt;a href="http://hg.plopbyte.net/osg-trunk/file/1af36d5c6fff/src/osgPlugins/osgjs"&gt;osgjs
format&lt;/a&gt;.&lt;/p&gt;</summary></entry><entry><title>ShowWebGL</title><link href="http://cedricpinson.com/showwebgl.html" rel="alternate"></link><updated>2011-04-04T00:18:00+02:00</updated><author><name>Cedric Pinson</name></author><id>tag:cedricpinson.com,2011-04-04:showwebgl.html</id><summary type="html">&lt;p&gt;I have put online &lt;a href="http://showwebgl.com"&gt;http://showwebgl.com&lt;/a&gt; it's a website for artists and
developers who want to show and share their models. The workflow is
really simple you have a model you want to show to people. Upload it and
get the url of the model, then share the url or embed the model in an
iframe.&lt;br /&gt;
The current website is still in progress so consider it in beta, in a
few weeks It will have a nice skin and better feature, but you can still
try it and report to bug to me :)&lt;/p&gt;
&lt;p&gt;The list of file format showwebgl is able to read the following file
extension obj, ive, 3ds, dae, ply, osg2, osgb, osgt, osgx, osgs, gem,
geo, mdl, rgb, lws, dxf, tgz, osgterrain, shp, zae, stl, sta, bvh, ac,
flt, ogr, osga, md2, x, json, txp, dw, osgtgz, 3dc, asc, lw, lwo, gdal,
bsp, osg&lt;/p&gt;
&lt;p&gt;You can add texture putting everything inside a zip archive, for example
you can put your collada model and its texture inside a zip then upload
the zip file.&lt;/p&gt;
&lt;p&gt;The back end use OpenSceneGraph :)&lt;/p&gt;</summary></entry><entry><title>Vehicle Editor</title><link href="http://cedricpinson.com/vehicle-editor.html" rel="alternate"></link><updated>2011-03-11T19:04:00+01:00</updated><author><name>Cedric Pinson</name></author><id>tag:cedricpinson.com,2011-03-11:vehicle-editor.html</id><summary type="html">&lt;p&gt;Since I experimented webgl stuff, some clients start to think seriously
to make 3d apps on the web. For one of them I have done a Vehicle
Editor. The idea is to select a chassis and customize it with different
element you can plug on it.
The pipeline use blender file exported to OpenScenGraph format and then
it convert it to osg.js . If you have a modern browser with
&lt;a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation"&gt;WebGL&lt;/a&gt;,
have a try with &lt;a href="demo/veditor/"&gt;real time version&lt;/a&gt; or try
the video on &lt;a href="http://www.youtube.com/watch?v=kMAqplEhnOA"&gt;youtube&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="media/2011/03/screen0.jpg" title="screen0" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="media/2011/03/screen1.jpg" title="screen1" /&gt;&lt;/p&gt;</summary></entry><entry><title>stats.js</title><link href="http://cedricpinson.com/stats-js.html" rel="alternate"></link><updated>2011-02-15T00:11:00+01:00</updated><author><name>Cedric Pinson</name></author><id>tag:cedricpinson.com,2011-02-15:stats-js.html</id><summary type="html">&lt;p&gt;I have written this afternoon a little class to manage graph, for
&lt;a href="http://osgjs.org"&gt;osg.js&lt;/a&gt; I will need to graph the update/cull/draw
traversal and I guess more others things, so I needed a stats
functionnality a bit like in
&lt;a href="https://github.com/mrdoob/three.js/"&gt;Three.js&lt;/a&gt; demo. I have first get
his stats.js, but it did not fit my use and I wanted to try without
redrawing the full graph. I want to get the previous result of the
canvas then shift it by a delta (new_time - previous_time) and draw
only one line for the delta elapsed. I have not check if it produces
better performance but it was cool to code it. You can see the result
&lt;a href="demo/stats.js/"&gt;here&lt;/a&gt; and the source code is on github. The
only problem I could see is that the line are not as clean as it could
because they are not connect from a full path, and the consequence is
that antialias can't work on the full path.&lt;/p&gt;
&lt;p&gt;&lt;a href="demo/stats.js/"&gt;&lt;img alt="" src="media/2011/02/Screenshot-12.jpg" title="Screenshot-12" /&gt;&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>osg.js</title><link href="http://cedricpinson.com/osgjs.html" rel="alternate"></link><updated>2011-02-14T23:48:00+01:00</updated><author><name>Cedric Pinson</name></author><id>tag:cedricpinson.com,2011-02-14:osgjs.html</id><summary type="html">&lt;p&gt;Since I play with WebGL, I wanted a way to work as I do with
&lt;a href="http://openscenegraph.org"&gt;OpenSceneGraph&lt;/a&gt;. So I started to write a
subset of &lt;a href="http://openscenegraph.org"&gt;OpenSceneGraph&lt;/a&gt; in javascript that
uses same concept. For this I have done a plugin for
&lt;a href="http://openscenegraph.org"&gt;OpenSceneGraph&lt;/a&gt; that is able to export scene
graph to osgjs json format. &lt;a href="http://osgjs.org"&gt;osgjs.org&lt;/a&gt; is young but
still ready to be used for project, I have created
&lt;a href="http://osgjs.org"&gt;osgjs.org&lt;/a&gt; to centralize information related to it.
The project needs users and contributors, so want to help ? Go to
&lt;a href="http://osgjs.org"&gt;osgjs.org&lt;/a&gt; and try it.&lt;/p&gt;</summary></entry><entry><title>OpenSceneGraph beginners book</title><link href="http://cedricpinson.com/openscenegraph-beginners-book.html" rel="alternate"></link><updated>2011-01-27T15:57:00+01:00</updated><author><name>Cedric Pinson</name></author><id>tag:cedricpinson.com,2011-01-27:openscenegraph-beginners-book.html</id><summary type="html">&lt;p&gt;Packt Publishing have published a new OpenSceneGraph beginners book, I
am happy for having reviewed the technical part of this book and I
recommand it for all beginners who wanted to start quickly on
&lt;a href="http://openscenegraph.org"&gt;OpenSceneGraph&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.packtpub.com/openscenegraph-3-0-beginners-guide/book"&gt;&lt;img alt="" src="media/2011/01/BeginnersGuide.png" title="BeginnersGuide" /&gt;&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>WebGL Particles</title><link href="http://cedricpinson.com/webgl-particles.html" rel="alternate"></link><updated>2010-08-17T01:24:00+02:00</updated><author><name>Cedric Pinson</name></author><id>tag:cedricpinson.com,2010-08-17:webgl-particles.html</id><summary type="html">&lt;p&gt;I have played with render to texture to generate particles with physics,
the idea is to compute particles position on the gpu and use it as input
to render them. For this I have use the firefox logo in 512x512 so we
have 262144 particles animated even if somes are invisibles. You can
find some useful information from this articles
&lt;a href="http://directtovideo.wordpress.com/2009/10/06/a-thoroughly-modern-particle-system/"&gt;http://directtovideo.wordpress.com/2009/10/06/a-thoroughly-modern-particle-system/&lt;/a&gt;
Ideally It would be great to have render to texture that support
floating point for webGL, but without that I did a 16 bits precision
with two textures ( high bits and low bits). It's a bit boring, in fact
It breaks me to try more effects, I would really like to have render to
texture with floating point support.&lt;/p&gt;
&lt;p&gt;To get a WebGL Implementation have look to Khronos instructions
&lt;a href="http://www.khronos.org/webgl/wiki/Getting_a_WebGL_Implementation"&gt;http://www.khronos.org/webgl/wiki/Getting_a_WebGL_Implementation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You need a browser able to run webGL to try the &lt;a href="demo/webgl-particles-demo/"&gt;realtime version&lt;/a&gt;
or use youtube&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=ShrUOL1V-xc"&gt;&lt;img alt="" src="media/2010/08/screen2.jpg" title="Screenshot-2" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=ShrUOL1V-xc"&gt;&lt;img alt="" src="media/2010/08/screen0.jpg" title="Screenshot-0" /&gt;&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>ArtGame Weekend</title><link href="http://cedricpinson.com/artgame-weekend.html" rel="alternate"></link><updated>2010-07-05T22:37:00+02:00</updated><author><name>Cedric Pinson</name></author><id>tag:cedricpinson.com,2010-07-05:artgame-weekend.html</id><summary type="html">&lt;p&gt;A Month ago, we have participated to the &lt;a href="http://artgameweekend.com/"&gt;artgame
weekend&lt;/a&gt; . The idea is to make a game in 48h
on a mobile platform. I joined Chen to work on her concept, the idea was
to use a guitar hero gameplay on an Hitler speech. The concept is strong
and make people feel uncomfortable with the game.
I have made the choice to work on android because I have a HTC hero and
it's more open than Iphone. When I started I had just installed eclipse
on my ubuntu box and tried the hello world example. I am a novice on
mobile platform. 48h later I am really impressed by this experience.
The workflow to test and develop android apps with eclipse was
impressive. It just worked as expected. usually I am an emacs users, but
for this experience I have used the 'regular' path as explained on the
android sdk.&lt;/p&gt;
&lt;p&gt;At the end we had a game, but we worked more after the weekend to
release it. Because of the sensible subject the game is, we had to
adjust/change some part.&lt;/p&gt;
&lt;p&gt;links:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.androlib.com/android.application.com-artgame-triumph-jxACz.aspx"&gt;adroidlib&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.androidzoom.com/android_games/casual/triumph-of-the-word_ijqc.html"&gt;androidzoom&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=roN9HsVh1zo"&gt;&lt;img alt="" src="media/2010/07/screen1.jpg" title="screen1" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://market.android.com/details?id=com.artgame.triumph"&gt;&lt;img alt="" src="media/2010/07/chart.jpg" title="chart" /&gt;&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>WebGL OpenSceneGraph</title><link href="http://cedricpinson.com/webgl-openscenegraph.html" rel="alternate"></link><updated>2010-04-17T17:51:00+02:00</updated><author><name>Cedric Pinson</name></author><id>tag:cedricpinson.com,2010-04-17:webgl-openscenegraph.html</id><summary type="html">&lt;p&gt;I am currently experimenting WebGL. I work with OpenSceneGraph and
wanted to try something equivalent in javascript. Even though javscript
is slower than C++ i wanted to try a proof of concept with WebGL and
create a library similar to OpenSceneGraph. After experimenting a bit, i
am convinced that a minimal OpenSceneGraph implementation would makes
sense for developer to create new 3d applications on the web. I will
continue in this direction and add features step by step... I did not
implement reader of obj, collada or other files types, instead i created
a json writer plugin for OpenSceneGraph then i am able to convert all
input format that OSG is able to read and convert them into json. The
idea is setup a webservice that will convert input files and return json
files to use in javascript.
The current demo uses few features, there is multitexturing (no dynamic
lighting yet). I tried to implement the shader compositor like Roland
submitted into OpenSceneGraph. My implementation is quick and dirty, so
a lot of improvement will come soon.&lt;/p&gt;
&lt;p&gt;To get a WebGL Implementation have look to Khronos instructions
&lt;a href="http://www.khronos.org/webgl/wiki/GettingaWebGL_Implementation"&gt;http://www.khronos.org/webgl/wiki/GettingaWebGL_Implementation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You have a browser that is able to run webGL try the realtime version
&lt;demo/demo-room-osg-js&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="media/2010/04/Screenshot_0.jpg" title="Screenshot_0" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="media/2010/04/Screenshot_1.jpg" title="Screenshot_1" /&gt;&lt;/p&gt;</summary></entry><entry><title>Global Game Jam 2010</title><link href="http://cedricpinson.com/global-game-jam-2010.html" rel="alternate"></link><updated>2010-02-01T20:48:00+01:00</updated><author><name>Cedric Pinson</name></author><id>tag:cedricpinson.com,2010-02-01:global-game-jam-2010.html</id><summary type="html">&lt;p&gt;We participated in the global game jam 2010. The idea was to create an
entire (small) game in 48 hours with a given theme. This year the theme
was 'seduction and deception'. Our game was called
PrincessKunKunPechoPecho and was created with the blender game engine so
that we could experiment a bit with it. We should have spent some time
learning about it before because we spent too much of our precious
little 48 hours learning about it during the session.. Anyway here is
the result :)&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.globalgamejam.org/2010/princesskunkunpechopecho"&gt;&lt;img alt="" src="media/2010/04/press.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Have a try
&lt;a href="http://www.globalgamejam.org/2010/princesskunkunpechopecho"&gt;http://www.globalgamejam.org/2010/princesskunkunpechopecho&lt;/a&gt;&lt;/p&gt;</summary></entry></feed>